/**
 * AI Service for PipeVault
 * Handles Claude and Gemini API calls
 *
 * SETUP: Add API keys in Secrets Manager:
 * - ANTHROPIC_API_KEY
 * - GOOGLE_AI_API_KEY
 */

import { getSecret } from 'wix-secrets-backend';
import { fetch } from 'wix-fetch';

const FORM_HELPER_PROMPT = `You are a helpful assistant for MPS Group's PipeVault storage facility. You're helping customers fill out the FREE pipe storage request form as part of MPS's 20 Year Anniversary celebration.

**YOUR ROLE**: Answer questions about the form fields and help customers understand what information is needed.

**YOU CAN HELP WITH**:

1. **What is a project reference?**
   - It's a unique identifier for their project (AFE number, well name, project code, etc.)
   - IMPORTANT: This acts as their passcode to check status and make inquiries later
   - They should choose something memorable

2. **Pipe Types**:
   - Blank Pipe: Standard pipe without special features
   - Sand Control: Pipe with screens for sand management
   - Flow Control: Pipe with flow regulation features
   - Tools: Downhole tools and equipment
   - Other: Any other tubular goods

3. **Connection Types**:
   - NUE (Non-Upset End): Basic threaded connection
   - EUE (External Upset End): Externally thickened connection
   - BTC (Buttress Thread Casing): Standard API buttress threads
   - Premium: High-end proprietary connections
   - Semi-Premium: Mid-tier enhanced connections
   - Other: Custom or specialty connections

4. **Grade Information**:
   - H40, J55, L80, N80, C90, T95, P110: API steel grades
   - Higher numbers = higher strength
   - L80/N80 are most common for oil & gas

5. **Casing Specifications**:
   - OD (Outer Diameter): Outside diameter in inches
   - Weight: Weight per foot in lbs/ft
   - ID (Inner Diameter): Calculated based on OD and weight
   - Drift ID: Minimum guaranteed inner diameter

6. **Screen Types** (for Sand Control):
   - DWW: Direct Wire Wrap
   - PPS: Premium Packing Screen
   - SL: Slotted Liner
   - Other: Specialty screens

7. **Trucking Options**:
   - Request a Quote: MPS will arrange and quote trucking
   - Will Provide Trucking: Customer handles their own transportation

**CONVERSATION STYLE**:
- Friendly and helpful
- Keep answers concise and clear
- Remind them about the FREE storage promotion when appropriate`;

/**
 * Call Claude API for conversational AI (form helper chatbot)
 * @param {Array<{role: string, content: string}>} messages - Previous messages
 * @param {string} userMessage - New message from user
 * @returns {Promise<string>} AI response
 */
export async function callClaudeFormHelper(messages, userMessage) {
  try {
    const apiKey = await getSecret('ANTHROPIC_API_KEY');

    const response = await fetch('https://api.anthropic.com/v1/messages', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': apiKey,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: 'claude-3-5-haiku-20241022',
        max_tokens: 500,
        system: FORM_HELPER_PROMPT,
        messages: [
          ...messages.map(m => ({
            role: m.role === 'model' ? 'assistant' : m.role,
            content: m.content
          })),
          {
            role: 'user',
            content: userMessage
          }
        ]
      })
    });

    if (!response.ok) {
      throw new Error(`Claude API error: ${response.status}`);
    }

    const data = await response.json();
    return data.content[0].text;
  } catch (error) {
    console.error('Error calling Claude API:', error);
    return 'Sorry, I encountered an error. Please try again or contact support.';
  }
}

/**
 * Generate storage request summary using Gemini
 * @param {string} companyName
 * @param {string} email
 * @param {string} referenceId
 * @param {Object} requestDetails - Form data
 * @param {Object} truckingInfo - Trucking data
 * @returns {Promise<string>} Professional summary
 */
export async function generateRequestSummary(companyName, email, referenceId, requestDetails, truckingInfo) {
  try {
    const apiKey = await getSecret('GOOGLE_AI_API_KEY');

    // Build prompt with all details
    const casingInfo = requestDetails.casingSpec
      ? `${requestDetails.casingSpec.size_in}" OD, ${requestDetails.casingSpec.weight_lbs_ft} lbs/ft`
      : 'N/A';

    const prompt = `Generate a professional 2-3 sentence summary for this pipe storage request:

**Company**: ${companyName}
**Contact**: ${requestDetails.fullName} (${email})
**Reference ID**: ${referenceId}
**Pipe Type**: ${requestDetails.itemType}
**Casing**: ${casingInfo}
**Grade**: ${requestDetails.grade}
**Connection**: ${requestDetails.connection}
**Quantity**: ${requestDetails.totalJoints} joints, ${requestDetails.avgJointLength}m avg length
**Total Length**: ${(requestDetails.totalJoints * requestDetails.avgJointLength).toFixed(2)}m
**Storage Period**: ${requestDetails.storageStartDate} to ${requestDetails.storageEndDate}
**Trucking**: ${truckingInfo.truckingType === 'quote' ? 'Quote requested' : 'Customer provided'}

Create a concise, professional summary highlighting key details.`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: prompt }]
          }]
        })
      }
    );

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error('Error generating summary:', error);
    // Fallback summary
    return `Storage request for ${requestDetails.totalJoints} joints of ${requestDetails.itemType} from ${companyName}. Reference: ${referenceId}.`;
  }
}

/**
 * Get chatbot response for inventory inquiries
 * @param {string} companyName
 * @param {Array} inventory - Company's inventory data
 * @param {Array} messages - Chat history
 * @param {string} userMessage - New question
 * @returns {Promise<string>} AI response
 */
export async function getInventoryChatResponse(companyName, inventory, messages, userMessage) {
  try {
    const apiKey = await getSecret('GOOGLE_AI_API_KEY');

    const inventorySummary = inventory.map(item =>
      `${item.pipeData?.itemType || 'Pipe'} - ${item.pipeData?.casingSpec?.size_in || '?'}" OD, Grade ${item.pipeData?.grade || '?'}, Location: ${item.rackId}, Status: ${item.status}`
    ).join('\n');

    const context = `You are an AI assistant for ${companyName}'s pipe inventory at PipeVault.

**Current Inventory**:
${inventorySummary}

Answer questions about their inventory, location, specifications, and status. Be helpful and concise.`;

    const conversationHistory = messages.map(m => `${m.role === 'user' ? 'User' : 'Assistant'}: ${m.content}`).join('\n');

    const fullPrompt = `${context}\n\n${conversationHistory}\n\nUser: ${userMessage}\n\nAssistant:`;

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          contents: [{
            parts: [{ text: fullPrompt }]
          }]
        })
      }
    );

    const data = await response.json();
    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error('Error getting inventory chat response:', error);
    return 'Sorry, I encountered an error. Please try again.';
  }
}
